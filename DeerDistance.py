# -*- coding: utf-8 -*-
##########################################################
#Yalda Rostainajad
#a01076641 SET C
# GIST 8138 
#feb 6th 2025
#purpose: The purpose of this script 
#is to calculate the optimal travel path and least-cost corridor between two deer patches
# using spatial analysis tools in ArcGIS, incorporating factors 
 # like distance accumulation, cost, and environmental data.
##########################################################

"""
Generated by ArcGIS ModelBuilder on : 2025-02-05 14:21:50
"""
import arcpy
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *

def DeerDistance():  # DeerDistance

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")

    arcpy.ImportToolbox(r"c:\program files\arcgis\pro\Resources\ArcToolbox\toolboxes\Spatial Analyst Tools.tbx")
    # Model Environment settings
    with arcpy.EnvManager(cellSize="Z:\\GIST_8106\\Mod04\\FortStJohnBC\\FTSTJON.gdb\\fstj_lc2000", extent="1310143.28159732 1254618.84768869 1326203.28159732 1267378.84768869 PROJCS[\"NAD_1983_Albers\",GEOGCS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Albers\"],PARAMETER[\"False_Easting\",1000000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-126.0],PARAMETER[\"Standard_Parallel_1\",50.0],PARAMETER[\"Standard_Parallel_2\",58.5],PARAMETER[\"Latitude_Of_Origin\",45.0],UNIT[\"Meter\",1.0]]", outputCoordinateSystem="PROJCS[\"NAD_1983_Albers\",GEOGCS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Albers\"],PARAMETER[\"False_Easting\",1000000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-126.0],PARAMETER[\"Standard_Parallel_1\",50.0],PARAMETER[\"Standard_Parallel_2\",58.5],PARAMETER[\"Latitude_Of_Origin\",45.0],UNIT[\"Meter\",1.0]]", 
                          snapRaster="Z:\\GIST_8106\\Mod04\\FortStJohnBC\\FTSTJON.gdb\\fstj_lc2000"):
        DeerPatch1 = "DeerPatch1"
        fstj_dem = arcpy.Raster("fstj_dem")
        dcost_dcost = arcpy.Raster("ModelBuilder\\dcost:dcost")
        DeerPatch2 = "DeerPatch2"
        fstj_dem_2_ = arcpy.Raster("fstj_dem")
        DeerPatch2_2_ = "DeerPatch2"

        # Process: Distance Accumulation (Distance Accumulation) (sa)
        Distanc_Deer1 = "Z:\\GIST_8106\\Mod04\\mod04_a01076641.gdb\\Distanc_Deer1"
        Distance_Accumulation = Distanc_Deer1
        BackLink_DeerPatch1 = "Z:\\GIST_8106\\Mod04\\mod04_a01076641.gdb\\BackLink_DeerPatch1"
        Output_Source_Direction_Raster = ""
        Output_Source_Location_Raster = ""
        Distanc_Deer1 = arcpy.sa.DistanceAccumulation(DeerPatch1, "", fstj_dem, dcost_dcost, "", "BINARY 1 -30 30", "", "BINARY 1 45", BackLink_DeerPatch1, Output_Source_Direction_Raster, Output_Source_Location_Raster, "", "", "", "", "PLANAR")
        Distanc_Deer1.save(Distance_Accumulation)

        BackLink_DeerPatch1 = arcpy.Raster(BackLink_DeerPatch1)

        # Process: Distance Accumulation (2) (Distance Accumulation) (sa)
        Distanc_Deer2 = "Z:\\GIST_8106\\Mod04\\mod04_a01076641.gdb\\Distanc_Deer2"
        Distance_Accumulation_2_ = Distanc_Deer2
        BackLink_DeerPatch2 = "Z:\\GIST_8106\\Mod04\\mod04_a01076641.gdb\\BackLink_DeerPatch2"
        Output_Source_Direction_Raster_2_ = ""
        Output_Source_Location_Raster_2_ = ""
        Distanc_Deer2 = arcpy.sa.DistanceAccumulation(DeerPatch2, "", fstj_dem_2_, dcost_dcost, "", "BINARY 1 -30 30", "", "BINARY 1 45", BackLink_DeerPatch2, Output_Source_Direction_Raster_2_, Output_Source_Location_Raster_2_, "", "", "", "", "PLANAR")
        Distanc_Deer2.save(Distance_Accumulation_2_)

        BackLink_DeerPatch2 = arcpy.Raster(BackLink_DeerPatch2)

        # Process: Optimal Path As Line (Optimal Path As Line) (sa)
        Optimal_DeerPat1 = "Z:\\GIST_8106\\Mod04\\mod04_a01076641.gdb\\Optimal_DeerPat1"
        arcpy.sa.OptimalPathAsLine(DeerPatch2_2_, Distanc_Deer1, BackLink_DeerPatch1, Optimal_DeerPat1, "Id", "BEST_SINGLE", "NETWORK_PATHS")
        .save(Optimal_Path_As_Line)


        # Process: Least Cost Corridor (Least Cost Corridor) (sa)
        Distance_Deer1_LeasrCostCorridor = "Z:\\GIST_8106\\Mod04\\mod04_a01076641.gdb\\Distance_Deer1_LeasrCostCorridor"
        arcpy.sa.LeastCostCorridor(in_accumulative_cost_distance_raster1=Distanc_Deer1, in_back_direction_raster1=BackLink_DeerPatch1, in_accumulative_cost_distance_raster2=Distanc_Deer2, in_back_direction_raster2=BackLink_DeerPatch2, out_raster=Distance_Deer1_LeasrCostCorridor, threshold_method="ACCUMULATIVE_COST", threshold=105006.367188)
        Distance_Deer1_LeasrCostCorridor = arcpy.Raster(Distance_Deer1_LeasrCostCorridor)

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace="Z:\\GIST_8106\\Mod04\\mod04_a01076641.gdb", workspace="Z:\\GIST_8106\\Mod04\\mod04_a01076641.gdb"):
        DeerDistance()
